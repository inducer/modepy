r"""
The associated paper is

.. [Jaskowiec2021] J. Jaśkowiec, N. Sukumar,
    *High‐order Symmetric Cubature Rules for Tetrahedra and Pyramids*,
    International Journal for Numerical Methods in Engineering,
    Vol. 122, pp. 148--171, 2021,
    `DOI <https://doi.org/10.1002/nme.6528>`__.

The quadrature rules can be found in the supplemental material at the same
URL and should be a file named ``nme6528-sup-0002-supinfo.tar``.
"""
from __future__ import annotations

import pathlib
import re
import sys
import tarfile


FILE_ORDER_REGEX = re.compile(r"cubature_tet_sym_p(\d{1,2})_n\d{1,3}_expand.txt")

FILE_TEMPLATE = """# GENERATED by modepy/contrib/weights-from-jaskowiec-sukumar.py
# DO NOT EDIT

__copyright__ = "(C) 2020 Jan Jaśkowiec, N. Sukumar"

__license__ = \"\"\"
This work is licensed under a Creative Commons Attribution
4.0 International License.

You should have received a copy of the license along with this
work. If not, see <http://creativecommons.org/licenses/by/4.0/>.
\"\"\"

__doc__ = \"\"\"
These quadrature rules have been extracted from the supplemental material of
[Jaskowiec2021]_. See the paper for additional information about the construction
and performance of these rules.

.. [Jaskowiec2021] J. Jaśkowiec, N. Sukumar,
    *High‐order Symmetric Cubature Rules for Tetrahedra and Pyramids*,
    International Journal for Numerical Methods in Engineering,
    Vol. 122, pp. 148--171, 2021,
    `DOI <https://doi.org/10.1002/nme.6528>`__
\"\"\"

import numpy as np


tet_data = %s
"""


def extract_rules_if_not(path: pathlib.Path) -> pathlib.Path:
    if path.is_dir():
        return path

    with tarfile.open(path) as f:
        path = path.parent / path.stem
        f.extractall(path, filter=tarfile.data_filter)

    return path


def generate_jaskowiec_sukumar_quadrature_rules(
    infolder: pathlib.Path, outfile: pathlib.Path | None = None
) -> None:
    import numpy as np

    infolder = infolder / "cubatures_tet_sym_repository"
    rules = {}

    for infile in infolder.iterdir():
        m = FILE_ORDER_REGEX.match(infile.name)
        if m is None:
            continue

        quad_degree = int(m.group(1))
        contents = np.loadtxt(infile)
        print(f">> Loading rule '{infile.name}'")

        if contents.ndim == 2:
            points = contents[:, :-1]
            weights = contents[:, -1].squeeze()
        else:
            points = contents[:-1].reshape(1, -1)
            weights = contents[-1].reshape(-1)

        rules[quad_degree - 1] = {
            "points": points.T,
            "weights": weights,
            "quad_degree": quad_degree,
        }

    print(f"Loaded {len(rules)} rules!")

    from pprint import pformat

    with np.printoptions(precision=16, threshold=sys.maxsize):
        txt = FILE_TEMPLATE % (
            pformat(rules).replace("array(", "np.array(").replace("'", '"'),
        )

    if outfile:
        with open(outfile, "w") as fd:
            fd.write(txt)
    else:
        print(txt)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("infile", type=pathlib.Path)
    parser.add_argument(
        "--outfile",
        type=pathlib.Path,
        default=None,
        help="name of the generated file (defaults to STDOUT)",
    )
    args = parser.parse_args()

    infolder = extract_rules_if_not(args.infile)
    generate_jaskowiec_sukumar_quadrature_rules(infolder, args.outfile)
